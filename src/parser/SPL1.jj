
PARSER_BEGIN(SPL1)
package parser;

import command.*;
import implementations.*;
import memory.*;
import program.Program;
import java.util.*;


public class SPL1 {

  public static void main(String[] args) throws ParseException{
      System.out.println("SPL PLP Parser Version 0.0.1:  Reading from standard input . . .");
     SPL1 spl1 = new SPL1(System.in);
     try{
         Program program = spl1.processInput();
         System.out.println("SPL PLP Parser Version 0.0.1:  SPL program parsed successfully.");
         if (program.typeCheck(new CompilationContext()))
         {
             program.execute(new ExecutionContext());
         } else
         {
             System.out.println("Erro de tipo");
         }
  } catch (Exception e)
        {
          System.out.println("SPL PLP Parser Version 0.0.1:  Encountered errors during parse.");
          e.printStackTrace();
        }


}}


PARSER_END(SPL1)

SKIP : /* WHITE SPACE */{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

TOKEN : /* SEPARATORS */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < COMMA : "," >
}

TOKEN : /* TOKENS declaration */
{
  < PRODUCTLINE : "PL" >
  | <FEATURENAME : "FeatureName">
  | <EXTENDS : "extends">
  | <AS : "as">
  | <FORMULA: "Formula">
  | <PRODUCT : "Product">
}

TOKEN : /* TOKENS types */
{
  < ROOT_TYPE : "ROOT" >
  | <MANDATORY_TYPE: "MANDATORY">
  | <OPTIONAL_TYPE: "OPTIONAL">
  | <ALTERNATIVE_TYPE: "ALTERNATIVE">
  | <OR_TYPE: "OR">

  }

  TOKEN : /* TOKENS of Commands */
  {
    < OFOT : "ofot" >
  | < SOFOT : "sofot" >
  | < TWOWAY : "2-way" >
  | < SIZE : "size" >
  | < COVERAGE : "coverage" >
  | < TEST : "test?" >
  }

TOKEN : /* OPERATORS */
{
 < ASSIGN : "=" >

}

TOKEN : /* TOKENS of Formulas */
{

<IMPLIES : "implies">
| < AND : "and" >
| < OR : "or" >
| < NOT : "not" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
}


Program processInput() :
{
  Program rretorn;
}
{
  rretorn = PProgram() < EOF >
  {
    return rretorn;
  }
}

Program PProgram() :
{
  PLDeclaration plDeclaration = null;
  Command command = null;
}
{
  <LBRACE> plDeclaration = PPLDeclaration()  [<SEMICOLON> command = PCommand() <SEMICOLON>] <RBRACE>
  {
    return new Program(plDeclaration, command);
  }
}

Command PCommand() :
{
  Command rt;

}
{
  (
    LOOKAHEAD(PUniqueCommand() < SEMICOLON > PUniqueCommand())
    rt = PCompositionCommand()
  | rt = PUniqueCommand()
  )
  {
    return rt;
  }
}

Composition PCompositionCommand() :
{
  Command c1 = null;
  Command c2 = null;
}
{
  c1 = PUniqueCommand() < SEMICOLON > c2 = PCommand()
  {
    return new Composition(c1, c2);
  }
}

Command PUniqueCommand() :
{
  Command rt = null;
}
{
  (
    LOOKAHEAD(< OFOT >)
    rt = POfot()
  | LOOKAHEAD(< SOFOT>)
    rt = PSofot()
  | LOOKAHEAD(< TWOWAY>)
    rt = PTwoWay()
  | LOOKAHEAD(< SIZE>)
    rt = PSize()
  | LOOKAHEAD(< COVERAGE>)
    rt = PCovarage()
  | LOOKAHEAD(<TEST>)
    rt = PTest()
  )
  {
    return rt;
  }
}

Ofot POfot() :
{
  Id idPL = null;
}
{
  < OFOT > idPL = PId()
  {
    return new Ofot(idPL);
  }
}

Sofot PSofot() :
{
  Id idPL = null;
}
{
  < SOFOT > idPL = PId()
  {
    return new Sofot(idPL);
  }
}

TwoWay PTwoWay() :
{
  Id idPL = null;
}
{
  < TWOWAY > idPL = PId()
  {
    return new TwoWay (idPL);
  }
}

Size PSize() :
{
  Command command = null;
}
{
  < SIZE > command = PCommand()
  {
    return new Size(command);
  }
}

Covarage PCovarage() :
{
  Command command = null;
}
{
  < COVERAGE> command = PCommand()
  {
    return new Covarage(command);
  }
}

Test PTest() :
{
  Command command = null;
  Id idProduct = null;
}
{
  < TEST > command = PCommand() idProduct = PId()
  {
    return new Test(command, idProduct);
  }
}

PLDeclaration PPLDeclaration() :
{
  FeatureNameDeclarationList featureNameDeclaration = null;
  FormDeclaration formDeclaration = null;
  ProductDeclarationList productDeclaration = null;
  Id plName = null;
}
{
  < PRODUCTLINE> plName = PId() < LBRACE > [((featureNameDeclaration = PDecFNList()) <SEMICOLON>)+ [ formDeclaration = PFormDeclaration() <SEMICOLON> ] [ (productDeclaration = PDecProdList() <SEMICOLON>)+ ] ]< RBRACE >
  {
    return new PLDeclaration(plName, featureNameDeclaration, formDeclaration, productDeclaration);
  }
}

FeatureNameDeclarationList PDecFNList() :
{
  FeatureNameDeclaration rt;
    FeatureNameDeclarationList fnDec;
}
{
  (
    LOOKAHEAD(PFNDeclaration() < SEMICOLON > PFNDeclaration())
    fnDec = PDecFNComposto()
  | rt = PFNDeclaration()
    {
      fnDec = new FeatureNameDeclarationList(rt);
    }
  )
  {
    return fnDec;
  }
}

FeatureNameDeclarationList PDecFNComposto() :
{
  FeatureNameDeclaration d1;
  FeatureNameDeclarationList d2;
}
{
  d1 = PFNDeclaration() < SEMICOLON> d2 = PDecFNList()
  {
    return new FeatureNameDeclarationList(d1, d2);
  }
}

FeatureNameDeclaration PFNDeclaration() :
{
  Id fnName = null;
  Id extendedNode = null;
  GeneralType type = null;
}
{
  < FEATURENAME> fnName = PId() [<EXTENDS> extendedNode = PId()] <AS> type = PType()
  {
    return new FeatureNameDeclaration(fnName, extendedNode, type);
  }
}

FormDeclaration PFormDeclaration() :
{
  Formula formula;
  Id formName;
}
{
  < FORMULA > formName = PId() <ASSIGN> formula = PFormula()
  {
    return new FormDeclaration(formName, formula);
  }
}

ProductDeclarationList PDecProdList() :
{
  ProductDeclaration rt;
  ProductDeclarationList prodDec;
}
{
  (
    LOOKAHEAD(PProductDeclaration() < SEMICOLON > PProductDeclaration())
    prodDec = PDecProdComposto()
  | rt = PProductDeclaration()
    {
      prodDec = new ProductDeclarationList(rt);
    }
  )
  {
    return prodDec;
  }
}

ProductDeclarationList PDecProdComposto() :
{
  ProductDeclaration d1;
  ProductDeclarationList d2;
}
{
  d1 = PProductDeclaration() < SEMICOLON > d2 = PDecProdList()
  {
    return new ProductDeclarationList(d1, d2);
  }
}

ProductDeclaration PProductDeclaration() :
{
  List<Id> featuresSelected;
  Id productName;
}
{
  < PRODUCT> productName = PId() <ASSIGN> <LBRACE> featuresSelected = PFeatureSelected() <RBRACE>
  {
    return new ProductDeclaration(productName, featuresSelected);
  }
}

List<Id> PFeatureSelected():
{
    Id featureSelected;
    List<Id> featuresSelected = new ArrayList<>();

}{
    featureSelected = PId()
    { featuresSelected.add(featureSelected); }
    (<COMMA> featureSelected = PId()
       {featuresSelected.add(featureSelected); })*
{ return featuresSelected;
    }
}

Formula PFormula() :
{
  Formula formula;
}
{
    formula = PBinaryFormula()
  {
    return formula;
  }
}


Formula PFormPrimaria() :
{
  Formula formula;
}
{
  (
    formula = PId()
  | < LPAREN > formula = PFormula() < RPAREN >
  )
  {
    return formula;
  }
}


Formula PUnaryFormula() :
{
  Formula formula;
}
{
  (
    formula = PNotForm()
    | formula = PFormPrimaria()
  )
  {
    return formula;
  }
}

NotForm PNotForm() :
{
  Formula formula;
}
{
  < NOT > formula = PFormula()
  {
    return new NotForm(formula);
  }
}

Formula PBinaryFormula() :
{
  Formula formula;
}
{
    formula = PBinaryFormula2()

 {
    return formula;
}
}

Formula PBinaryFormula2() :
{
  Formula formula, param2;
}
{
    formula = PBinaryFormula3()
    (<OR> param2 = PBinaryFormula3()
        { formula = new OrForm(formula, param2);}
      | <IMPLIES> param2 = PBinaryFormula3()
        { formula = new ImpliesForm(formula, param2);}
    )*

 {
    return formula;
}
}

Formula PBinaryFormula3() :
{
  Formula formula, param2 = null;
}
{
  formula = PUnaryFormula()
  (
    < AND > param2 = PUnaryFormula()
    {
       formula = new AndForm(formula, param2);
    }
   )*

 {
    return formula;
}
}


GeneralType PType() :
{
  GeneralType type;
}{
    <ROOT_TYPE> { return type = new FNTypeClass(Types.ROOT);}
    | <MANDATORY_TYPE> {return type = new FNTypeClass(Types.MANDATORY);}
    | <OPTIONAL_TYPE> {return type = new FNTypeClass(Types.OPTIONAL);}
    | <ALTERNATIVE_TYPE>  {return type = new FNTypeClass(Types.ALTERNATIVE);}
    | <OR_TYPE> {return type = new FNTypeClass(Types.OR);}

}

Id PId() :
{
  Token token;
}
{
  token = < IDENTIFIER >
  {
    return new Id(token.toString());
  }
}