
PARSER_BEGIN(SPL1)
package parser;

import implementations.PLDeclaration;
import program.Program;
import implementations.Id;

public class SPL1 {

  public static void main(String[] args) throws ParseException{
      System.out.println("SPL PLP Parser Version 0.0.1:  Reading from standard input . . .");
     SPL1 spl1 = new SPL1(System.in);
     try{
        Program program = spl1.processInput();
  } catch (Exception e)
        {
          System.out.println("SPL PLP Parser Version 0.0.1:  Encountered errors during parse.");
          e.printStackTrace();
        }


}}


PARSER_END(SPL1)

SKIP : /* WHITE SPACE */{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

TOKEN : /* SEPARATORS */
{
  < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < COMMA : "," >
}

TOKEN : /* TOKENS declaration */
{
  < PRODUCTLINE : "PL" >
  | <FEATURENAME : "FeatureName">
  | <EXTENDS : "extends">
  | <AS : "as">
  | <FORMULA: "Formula">
  | <PRODUCT : "Product">
}

TOKEN : /* TOKENS types */
{
  < ROOT_TYPE : "ROOT" >
  | <MANDATORY_TYPE: "MANDATORY">
  | <OPTIONAL_TYPE: "OPTIONAL">
  | <ALTERNATIVE_TYPE: "ALTERNATIVE">
  | <OR_TYPE: "OR">

  }

TOKEN : /* OPERATORS */
{
 < ASSIGN : "=" >

}

TOKEN : /* TOKENS of Formulas */
{

<IMPLIES : "implies">
| < AND : "and" >
| < OR : "or" >
| < NOT : "not" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
}

Program processInput() :
{
  Program rretorn;
}
{
  rretorn = PProgram() < EOF >
  {
    return rretorn;
  }
}

Program PProgram() :
{
  PLDeclaration plDeclaration = null;
}
{
  plDeclaration = PPLDeclaration()
  {
    return new Program(plDeclaration);
  }
}

PLDeclaration PPLDeclaration() :
{
  Id plName;
}
{
  < PRODUCTLINE> plName = PId() < LBRACE > < RBRACE >
  {
    return new PLDeclaration(plName);
  }
}

Id PId() :
{
  Token token;
}
{
  token = < IDENTIFIER >
  {
    return new Id(token.toString());
  }
}