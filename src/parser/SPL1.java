/* SPL1.java */
/* Generated By:JavaCC: Do not edit this line. SPL1.java */
package parser;

import memory.*;
import program.Program;
import command.*;
import declarations.*;
import formulas.*;
import types.*;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;


public class SPL1 implements SPL1Constants {

  public static void main(String[] args) throws ParseException, IOException {
      System.out.println("SPL PLP Parser Version 0.0.1:  Reading from standard input . . .");
      FileInputStream fin = new FileInputStream("/home/pontes/Documents/plp2021_project/src/parser/test1");
      int i = fin.read();
      SPL1 spl1 = new SPL1(new ByteArrayInputStream(fin.readAllBytes()));
      try{
         Program program = spl1.processInput();
         System.out.println("SPL PLP Parser Version 0.0.1:  SPL program parsed successfully.");
         if (program.typeCheck(new CompilationContext()))
         {
             program.execute(new ExecutionContext());
         } else
         {
             System.out.println("Erro de tipo");
         }
  } catch (Exception e)
        {
          System.out.println("SPL PLP Parser Version 0.0.1:  Encountered errors during parse.");
          e.printStackTrace();
        }


}

  static final public Program processInput() throws ParseException {Program rretorn;
    rretorn = PProgram();
    jj_consume_token(0);
{if ("" != null) return rretorn;}
    throw new Error("Missing return statement in function");
}

  static final public Program PProgram() throws ParseException {PLDeclaration plDeclaration = null;
  Command command = null;
    jj_consume_token(LBRACE);
    plDeclaration = PPLDeclaration();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      command = PCommand();
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
{if ("" != null) return new Program(plDeclaration, command);}
    throw new Error("Missing return statement in function");
}

  static final public Command PCommand() throws ParseException {Command rt;
    if (jj_2_1(2147483647)) {
      rt = PCompositionCommand();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OFOT:
      case SOFOT:
      case TWOWAY:
      case SIZE:
      case COVERAGE:
      case TEST:{
        rt = PUniqueCommand();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return rt;}
    throw new Error("Missing return statement in function");
}

  static final public Composition PCompositionCommand() throws ParseException {Command c1 = null;
  Command c2 = null;
    c1 = PUniqueCommand();
    jj_consume_token(SEMICOLON);
    c2 = PCommand();
{if ("" != null) return new Composition(c1, c2);}
    throw new Error("Missing return statement in function");
}

  static final public Command PUniqueCommand() throws ParseException {Command rt = null;
    if (jj_2_2(2147483647)) {
      rt = POfot();
    } else if (jj_2_3(2147483647)) {
      rt = PSofot();
    } else if (jj_2_4(2147483647)) {
      rt = PTwoWay();
    } else if (jj_2_5(2147483647)) {
      rt = PSize();
    } else if (jj_2_6(2147483647)) {
      rt = PCovarage();
    } else if (jj_2_7(2147483647)) {
      rt = PTest();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return rt;}
    throw new Error("Missing return statement in function");
}

  static final public Ofot POfot() throws ParseException {Id idPL = null;
    jj_consume_token(OFOT);
    idPL = PId();
{if ("" != null) return new Ofot(idPL);}
    throw new Error("Missing return statement in function");
}

  static final public Sofot PSofot() throws ParseException {Id idPL = null;
    jj_consume_token(SOFOT);
    idPL = PId();
{if ("" != null) return new Sofot(idPL);}
    throw new Error("Missing return statement in function");
}

  static final public TwoWay PTwoWay() throws ParseException {Id idPL = null;
    jj_consume_token(TWOWAY);
    idPL = PId();
{if ("" != null) return new TwoWay (idPL);}
    throw new Error("Missing return statement in function");
}

  static final public Size PSize() throws ParseException {Command command = null;
    jj_consume_token(SIZE);
    command = PCommand();
{if ("" != null) return new Size((PoolGenerateCommand) command);}
    throw new Error("Missing return statement in function");
}

  static final public Covarage PCovarage() throws ParseException {Command command = null;
    jj_consume_token(COVERAGE);
    command = PCommand();
{if ("" != null) return new Covarage((PoolGenerateCommand) command);}
    throw new Error("Missing return statement in function");
}

  static final public Test PTest() throws ParseException {Command command = null;
  Id idProduct = null;
    jj_consume_token(TEST);
    command = PCommand();
    idProduct = PId();
{if ("" != null) return new Test((PoolGenerateCommand) command, idProduct);}
    throw new Error("Missing return statement in function");
}

  static final public PLDeclaration PPLDeclaration() throws ParseException {FeatureNameDeclarationList featureNameDeclaration = null;
  FormDeclaration formDeclaration = null;
  ProductDeclarationList productDeclaration = null;
  Id plName = null;
    jj_consume_token(PRODUCTLINE);
    plName = PId();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FEATURENAME:{
      label_1:
      while (true) {
        featureNameDeclaration = PDecFNList();
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FEATURENAME:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FORMULA:{
        formDeclaration = PFormDeclaration();
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRODUCT:{
        label_2:
        while (true) {
          productDeclaration = PDecProdList();
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PRODUCT:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
{if ("" != null) return new PLDeclaration(plName, featureNameDeclaration, formDeclaration, productDeclaration);}
    throw new Error("Missing return statement in function");
}

  static final public FeatureNameDeclarationList PDecFNList() throws ParseException {FeatureNameDeclaration rt;
    FeatureNameDeclarationList fnDec;
    if (jj_2_8(2147483647)) {
      fnDec = PDecFNComposto();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FEATURENAME:{
        rt = PFNDeclaration();
fnDec = new FeatureNameDeclarationList(rt);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return fnDec;}
    throw new Error("Missing return statement in function");
}

  static final public FeatureNameDeclarationList PDecFNComposto() throws ParseException {FeatureNameDeclaration d1;
  FeatureNameDeclarationList d2;
    d1 = PFNDeclaration();
    jj_consume_token(SEMICOLON);
    d2 = PDecFNList();
{if ("" != null) return new FeatureNameDeclarationList(d1, d2);}
    throw new Error("Missing return statement in function");
}

  static final public FeatureNameDeclaration PFNDeclaration() throws ParseException {Id fnName = null;
  Id extendedNode = null;
  GeneralType type = null;
    jj_consume_token(FEATURENAME);
    fnName = PId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      extendedNode = PId();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(AS);
    type = PType();
{if ("" != null) return new FeatureNameDeclaration(fnName, extendedNode, type);}
    throw new Error("Missing return statement in function");
}

  static final public FormDeclaration PFormDeclaration() throws ParseException {Formula formula;
  Id formName;
    jj_consume_token(FORMULA);
    formName = PId();
    jj_consume_token(ASSIGN);
    formula = PFormula();
{if ("" != null) return new FormDeclaration(formName, formula);}
    throw new Error("Missing return statement in function");
}

  static final public ProductDeclarationList PDecProdList() throws ParseException {ProductDeclaration rt;
  ProductDeclarationList prodDec;
    if (jj_2_9(2147483647)) {
      prodDec = PDecProdComposto();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRODUCT:{
        rt = PProductDeclaration();
prodDec = new ProductDeclarationList(rt);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return prodDec;}
    throw new Error("Missing return statement in function");
}

  static final public ProductDeclarationList PDecProdComposto() throws ParseException {ProductDeclaration d1;
  ProductDeclarationList d2;
    d1 = PProductDeclaration();
    jj_consume_token(SEMICOLON);
    d2 = PDecProdList();
{if ("" != null) return new ProductDeclarationList(d1, d2);}
    throw new Error("Missing return statement in function");
}

  static final public ProductDeclaration PProductDeclaration() throws ParseException {List<Id> featuresSelected;
  Id productName;
    jj_consume_token(PRODUCT);
    productName = PId();
    jj_consume_token(ASSIGN);
    jj_consume_token(LBRACE);
    featuresSelected = PFeatureSelected();
    jj_consume_token(RBRACE);
{if ("" != null) return new ProductDeclaration(productName, featuresSelected);}
    throw new Error("Missing return statement in function");
}

  static final public List<Id> PFeatureSelected() throws ParseException {Id featureSelected;
    List<Id> featuresSelected = new ArrayList<>();
    featureSelected = PId();
featuresSelected.add(featureSelected);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      featureSelected = PId();
featuresSelected.add(featureSelected);
    }
{if ("" != null) return featuresSelected;}
    throw new Error("Missing return statement in function");
}

  static final public Formula PFormula() throws ParseException {Formula formula;
    formula = PBinaryFormula();
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  static final public Formula PFormPrimaria() throws ParseException {Formula formula;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      formula = PId();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      formula = PFormula();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  static final public Formula PUnaryFormula() throws ParseException {Formula formula;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      formula = PNotForm();
      break;
      }
    case LPAREN:
    case IDENTIFIER:{
      formula = PFormPrimaria();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  static final public NotForm PNotForm() throws ParseException {Formula formula;
    jj_consume_token(NOT);
    formula = PFormula();
{if ("" != null) return new NotForm(formula);}
    throw new Error("Missing return statement in function");
}

  static final public Formula PBinaryFormula() throws ParseException {Formula formula;
    formula = PBinaryFormula2();
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  static final public Formula PBinaryFormula2() throws ParseException {Formula formula, param2;
    formula = PBinaryFormula3();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLIES:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        jj_consume_token(OR);
        param2 = PBinaryFormula3();
formula = new OrForm(formula, param2);
        break;
        }
      case IMPLIES:{
        jj_consume_token(IMPLIES);
        param2 = PBinaryFormula3();
formula = new ImpliesForm(formula, param2);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  static final public Formula PBinaryFormula3() throws ParseException {Formula formula, param2 = null;
    formula = PUnaryFormula();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      param2 = PUnaryFormula();
formula = new AndForm(formula, param2);
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  static final public GeneralType PType() throws ParseException {GeneralType type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ROOT_TYPE:{
      jj_consume_token(ROOT_TYPE);
{if ("" != null) return type = new FNTypeClass(Types.ROOT);}
      break;
      }
    case MANDATORY_TYPE:{
      jj_consume_token(MANDATORY_TYPE);
{if ("" != null) return type = new FNTypeClass(Types.MANDATORY);}
      break;
      }
    case OPTIONAL_TYPE:{
      jj_consume_token(OPTIONAL_TYPE);
{if ("" != null) return type = new FNTypeClass(Types.OPTIONAL);}
      break;
      }
    case ALTERNATIVE_TYPE:{
      jj_consume_token(ALTERNATIVE_TYPE);
{if ("" != null) return type = new FNTypeClass(Types.ALTERNATIVE);}
      break;
      }
    case OR_TYPE:{
      jj_consume_token(OR_TYPE);
{if ("" != null) return type = new FNTypeClass(Types.OR);}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Id PId() throws ParseException {Token token;
    token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Id(token.toString());}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_PUniqueCommand_184_5_13()
 {
    if (jj_3R_PCovarage_243_3_23()) return true;
    return false;
  }

  static private boolean jj_3R_PUniqueCommand_182_5_12()
 {
    if (jj_3R_PSize_232_3_22()) return true;
    return false;
  }

  static private boolean jj_3R_PUniqueCommand_180_5_11()
 {
    if (jj_3R_PTwoWay_221_3_21()) return true;
    return false;
  }

  static private boolean jj_3R_PUniqueCommand_178_5_10()
 {
    if (jj_3R_PSofot_210_3_20()) return true;
    return false;
  }

  static private boolean jj_3R_PUniqueCommand_176_5_9()
 {
    if (jj_3R_POfot_199_3_19()) return true;
    return false;
  }

  static private boolean jj_3R_PProductDeclaration_368_3_8()
 {
    if (jj_scan_token(PRODUCT)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_PFeatureSelected_380_5_18()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_PUniqueCommand_175_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PUniqueCommand_176_5_9()) {
    jj_scanpos = xsp;
    if (jj_3R_PUniqueCommand_178_5_10()) {
    jj_scanpos = xsp;
    if (jj_3R_PUniqueCommand_180_5_11()) {
    jj_scanpos = xsp;
    if (jj_3R_PUniqueCommand_182_5_12()) {
    jj_scanpos = xsp;
    if (jj_3R_PUniqueCommand_184_5_13()) {
    jj_scanpos = xsp;
    if (jj_3R_PUniqueCommand_186_5_14()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PCompositionCommand_164_3_34()
 {
    if (jj_3R_PUniqueCommand_175_3_6()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PCommand_148_3_31()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_PUniqueCommand_175_3_6()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PUniqueCommand_175_3_6()) return true;
    return false;
  }

  static private boolean jj_3R_PTest_255_3_24()
 {
    if (jj_scan_token(TEST)) return true;
    if (jj_3R_PCommand_148_3_31()) return true;
    if (jj_3R_PId_505_3_15()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_PProductDeclaration_368_3_8()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PProductDeclaration_368_3_8()) return true;
    return false;
  }

  static private boolean jj_3R_PFNDeclaration_313_34_16()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PCommand_151_5_33()
 {
    if (jj_3R_PUniqueCommand_175_3_6()) return true;
    return false;
  }

  static private boolean jj_3R_PCommand_149_5_32()
 {
    if (jj_3R_PCompositionCommand_164_3_34()) return true;
    return false;
  }

  static private boolean jj_3R_PCommand_148_3_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PCommand_149_5_32()) {
    jj_scanpos = xsp;
    if (jj_3R_PCommand_151_5_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PCovarage_243_3_23()
 {
    if (jj_scan_token(COVERAGE)) return true;
    if (jj_3R_PCommand_148_3_31()) return true;
    return false;
  }

  static private boolean jj_3R_PSize_232_3_22()
 {
    if (jj_scan_token(SIZE)) return true;
    if (jj_3R_PCommand_148_3_31()) return true;
    return false;
  }

  static private boolean jj_3R_PTwoWay_221_3_21()
 {
    if (jj_scan_token(TWOWAY)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PId_505_3_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_PFNDeclaration_313_3_7()
 {
    if (jj_scan_token(FEATURENAME)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PFNDeclaration_313_34_16()) jj_scanpos = xsp;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_PType_492_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_PType_496_7_29()
 {
    if (jj_scan_token(OR_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_PType_495_7_28()
 {
    if (jj_scan_token(ALTERNATIVE_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_PType_494_7_27()
 {
    if (jj_scan_token(OPTIONAL_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_PType_493_7_26()
 {
    if (jj_scan_token(MANDATORY_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_PSofot_210_3_20()
 {
    if (jj_scan_token(SOFOT)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    return false;
  }

  static private boolean jj_3R_PType_492_5_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PType_492_5_25()) {
    jj_scanpos = xsp;
    if (jj_3R_PType_493_7_26()) {
    jj_scanpos = xsp;
    if (jj_3R_PType_494_7_27()) {
    jj_scanpos = xsp;
    if (jj_3R_PType_495_7_28()) {
    jj_scanpos = xsp;
    if (jj_3R_PType_496_7_29()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PType_492_5_25()
 {
    if (jj_scan_token(ROOT_TYPE)) return true;
    return false;
  }

  static private boolean jj_3R_POfot_199_3_19()
 {
    if (jj_scan_token(OFOT)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_PFNDeclaration_313_3_7()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PFNDeclaration_313_3_7()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(TEST)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(COVERAGE)) return true;
    return false;
  }

  static private boolean jj_3R_PFeatureSelected_382_6_30()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PId_505_3_15()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(TWOWAY)) return true;
    return false;
  }

  static private boolean jj_3R_PFeatureSelected_380_5_18()
 {
    if (jj_3R_PId_505_3_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PFeatureSelected_382_6_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(SOFOT)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(OFOT)) return true;
    return false;
  }

  static private boolean jj_3R_PUniqueCommand_186_5_14()
 {
    if (jj_3R_PTest_255_3_24()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SPL1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x1f800000,0x2000,0x10000,0x20000,0x20000,0x2000,0x2000,0x4000,0x20000,0x800,0x40,0x40,0x40000000,0x40000000,0x80000000,0x7c0000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x6,0x1,0x1,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SPL1(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SPL1(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SPL1TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SPL1(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SPL1TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SPL1TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SPL1(SPL1TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SPL1TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[37];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 37; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 9; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

 }
